import { Command } from 'src/bot/base/commandRegister.decorator';
import { CommandMessage } from 'src/bot/base/command.abstract';
import { ChannelMessage, EMarkdownType } from 'mezon-sdk';
import { CommandService } from 'src/bot/services/command.service';
import { MezonClientService } from 'src/mezon/services/mezon-client.service';
import { getRandomColor } from 'src/bot/utils/helps';
import { ButtonAction, ButtonStyle, MessageComponentType } from 'src/bot/constants/types';
import { ActionRowComponent, ButtonComponent } from 'src/bot/constants/interfaces';

@Command('command')
export class CommandBotCommand extends CommandMessage {
  constructor(
    private commandService: CommandService,
    clientService: MezonClientService,
  ) {
    super(clientService);
  }

  async execute(args: string[], message: ChannelMessage): Promise<any> {
    const messageChannel = await this.getChannelMessage(message);
    if (!messageChannel) return;

    // X·ª≠ l√Ω c√°c subcommand: save, list, detail, update, delete, restore, find
    if (args.length === 0) {
      return this.showHelp(messageChannel);
    }

    const subCommand = args[0].toLowerCase();
    const remainingArgs = this.parseArgs(args.slice(1));

    try {
      switch (subCommand) {
        case 'save':
          return this.handleSave(remainingArgs, messageChannel);
        case 'list':
          return this.handleList(remainingArgs, messageChannel);
        case 'detail':
          return this.handleDetail(remainingArgs, messageChannel);
        case 'update':
          return this.handleUpdate(remainingArgs, messageChannel);
        case 'delete':
          return this.handleDelete(remainingArgs, messageChannel);
        case 'restore':
          return this.handleRestore(remainingArgs, messageChannel);
        case 'find':
          return this.handleFind(remainingArgs, messageChannel);
        default:
          return this.showHelp(messageChannel);
      }
    } catch (error) {
      console.error('Error in CommandCommand:', error);
      return messageChannel.reply({
        t: `‚ùå L·ªói: ${error.message}`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ùå L·ªói: ${error.message}`.length,
          },
        ],
      });
    }
  }

  private parseArgs(args: string[]): Record<string, string> {
    const result: Record<string, string> = {};
    let currentKey = '';
    let currentValue = '';
    let inQuotes = false;

    for (const arg of args) {
      if (arg.startsWith('--')) {
        // N·∫øu ƒëang trong d·∫•u ngo·∫∑c k√©p th√¨ ti·∫øp t·ª•c v·ªõi gi√° tr·ªã
        if (inQuotes) {
          currentValue += ' ' + arg;
          continue;
        }

        // L∆∞u key-value pair tr∆∞·ªõc ƒë√≥
        if (currentKey) {
          result[currentKey] = currentValue.trim();
        }

        // B·∫Øt ƒë·∫ßu key m·ªõi
        const keyParts = arg.substring(2).split('=');
        currentKey = keyParts[0];

        if (keyParts.length > 1) {
          currentValue = keyParts.slice(1).join('=');
          
          // Ki·ªÉm tra n·∫øu b·∫Øt ƒë·∫ßu v·ªõi d·∫•u ngo·∫∑c k√©p nh∆∞ng kh√¥ng k·∫øt th√∫c
          if (currentValue.startsWith('"') && !currentValue.endsWith('"')) {
            inQuotes = true;
            currentValue = currentValue.substring(1); // B·ªè d·∫•u ngo·∫∑c k√©p m·ªü
          } else if (currentValue.startsWith('"') && currentValue.endsWith('"')) {
            currentValue = currentValue.substring(1, currentValue.length - 1); // B·ªè c·∫£ hai d·∫•u ngo·∫∑c k√©p
          }
        } else {
          currentValue = '';
        }
      } else {
        // Ti·∫øp t·ª•c v·ªõi ph·∫ßn gi√° tr·ªã
        if (currentValue) {
          if (inQuotes) {
            // N·∫øu ƒëang trong d·∫•u ngo·∫∑c k√©p
            currentValue += ' ' + arg;
            
            // Ki·ªÉm tra n·∫øu k·∫øt th√∫c d·∫•u ngo·∫∑c k√©p
            if (arg.endsWith('"')) {
              inQuotes = false;
              currentValue = currentValue.substring(0, currentValue.length - 1); // B·ªè d·∫•u ngo·∫∑c k√©p ƒë√≥ng
            }
          } else {
            currentValue += ' ' + arg;
          }
        } else {
          currentValue = arg;
        }
      }
    }

    // L∆∞u key-value pair cu·ªëi c√πng
    if (currentKey) {
      result[currentKey] = currentValue.trim();
    }

    return result;
  }

  private async showHelp(messageChannel: any): Promise<any> {
    return messageChannel.reply({
      t: 'üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh command:',
      embed: [
        {
          color: getRandomColor(),
          title: 'DevHelper - Command Help',
          description: 'C√°c l·ªánh qu·∫£n l√Ω command (l∆∞u tr·ªØ l·ªánh):',
          fields: [
            {
              name: '/command save',
              value: 'L∆∞u l·ªánh m·ªõi\n' +
                    'V√≠ d·ª•: `/command save --title="git-stash" --command="git stash apply" --desc="√Åp d·ª•ng stash g·∫ßn nh·∫•t" --category="git" --parameters=\'{"branch":"T√™n nh√°nh"}\' --examples=\'["git stash apply", "git stash apply stash@{1}"]\'`',
            },
            {
              name: '/command list',
              value: 'Li·ªát k√™ l·ªánh theo danh m·ª•c\n' +
                    'V√≠ d·ª•: `/command list --category="git"`',
            },
            {
              name: '/command detail',
              value: 'Xem chi ti·∫øt l·ªánh\n' +
                    'V√≠ d·ª•: `/command detail --id=125`',
            },
            {
              name: '/command update',
              value: 'C·∫≠p nh·∫≠t l·ªánh\n' +
                    'V√≠ d·ª•: `/command update --id=125 --title="git-stash-apply" --desc="√Åp d·ª•ng stash ƒë√£ l∆∞u"`',
            },
            {
              name: '/command delete',
              value: 'X√≥a l·ªánh (soft delete)\n' +
                    'V√≠ d·ª•: `/command delete --id=125`',
            },
            {
              name: '/command restore',
              value: 'Kh√¥i ph·ª•c l·ªánh ƒë√£ x√≥a\n' +
                    'V√≠ d·ª•: `/command restore --id=125`',
            },
            {
              name: '/command find',
              value: 'T√¨m ki·∫øm l·ªánh theo t·ª´ kh√≥a\n' +
                    'V√≠ d·ª•: `/command find --query="git stash"`',
            },
          ],
          footer: {
            text: 'DevHelper Bot',
          },
        },
      ],
    });
  }

  private async handleSave(args: Record<string, string>, messageChannel: any): Promise<any> {
    // Ki·ªÉm tra c√°c tham s·ªë b·∫Øt bu·ªôc
    const { title, command, desc, category, parameters, examples } = args;
    
    if (!title || !command || !category) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title, --command v√† --category.',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title, --command v√† --category.'.length,
          },
        ],
      });
    }

    // Parse parameters v√† examples n·∫øu c√≥
    let parsedParameters = {};
    let parsedExamples = [];
    
    try {
      if (parameters) {
        parsedParameters = JSON.parse(parameters);
      }
      if (examples) {
        parsedExamples = JSON.parse(examples);
      }
    } catch (error) {
      return messageChannel.reply({
        t: `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters ho·∫∑c examples: ${error.message}`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters ho·∫∑c examples: ${error.message}`.length,
          },
        ],
      });
    }

    // L∆∞u l·ªánh v√†o database
    const newCommand = await this.commandService.create({
      title,
      command,
      description: desc || '',
      category,
      parameters: parsedParameters,
      examples: parsedExamples,
    });

    // T·∫°o ph·∫ßn hi·ªÉn th·ªã parameters n·∫øu c√≥
    let parametersText = '';
    if (Object.keys(parsedParameters).length > 0) {
      parametersText = '\nL·ªánh c√≥ ' + Object.keys(parsedParameters).length + ' tham s·ªë:\n';
      
      for (const [param, desc] of Object.entries(parsedParameters)) {
        parametersText += `‚Ä¢ ${param}: ${desc}\n`;
      }
    }

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
    return messageChannel.reply({
      t: `‚úÖ ƒê√£ l∆∞u l·ªánh! ID: ${newCommand.id}\n${parametersText}\nS·ª≠ d·ª•ng /command detail --id=${newCommand.id} ƒë·ªÉ xem chi ti·∫øt.`,
      mk: [
        {
          type: EMarkdownType.PRE,
          s: 0,
          e: `‚úÖ ƒê√£ l∆∞u l·ªánh! ID: ${newCommand.id}\n${parametersText}\nS·ª≠ d·ª•ng /command detail --id=${newCommand.id} ƒë·ªÉ xem chi ti·∫øt.`.length,
        },
      ],
    });
  }

  private async handleList(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { category } = args;
    
    if (!category) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --category.',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --category.'.length,
          },
        ],
      });
    }

    // L·∫•y danh s√°ch l·ªánh
    const commands = await this.commandService.listByCategory(category);
    
    if (commands.length === 0) {
      return messageChannel.reply({
        t: `üìã Kh√¥ng t√¨m th·∫•y l·ªánh n√†o trong danh m·ª•c "${category}".`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `üìã Kh√¥ng t√¨m th·∫•y l·ªánh n√†o trong danh m·ª•c "${category}".`.length,
          },
        ],
      });
    }

    // T·∫°o danh s√°ch l·ªánh
    let listText = `üìã Danh s√°ch l·ªánh trong danh m·ª•c "${category}":\n\n`;
    
    commands.forEach((cmd, index) => {
      listText += `${index + 1}. #${cmd.id}: ${cmd.title} - ${cmd.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
    });
    
    listText += '\nüìå C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n';
    listText += `‚Ä¢ /command detail --id=${commands[0].id}    (Xem chi ti·∫øt l·ªánh)\n`;
    listText += `‚Ä¢ /command update --id=${commands[0].id}    (C·∫≠p nh·∫≠t l·ªánh)\n`;
    listText += `‚Ä¢ /command delete --id=${commands[0].id}    (X√≥a l·ªánh)\n`;

    // T·∫°o c√°c button ƒë·ªÉ xem chi ti·∫øt
    const buttons: ButtonComponent[] = [];
    for (let i = 0; i < Math.min(5, commands.length); i++) {
      buttons.push({
        type: MessageComponentType.BUTTON,
        style: ButtonStyle.BLUE,
        label: `Xem Chi Ti·∫øt #${commands[i].id}`,
        custom_id: `${ButtonAction.VIEW}:command:${commands[i].id}`,
      } as ButtonComponent);
    }

    const actionRow: ActionRowComponent = {
      type: MessageComponentType.ACTION_ROW,
      components: buttons,
    } as ActionRowComponent;

    return messageChannel.reply({
      t: listText,
      mk: [
        {
          type: EMarkdownType.PRE,
          s: 0,
          e: listText.length,
        },
      ],
      components: [actionRow],
    } as any);
  }

  private async handleDetail(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;
    
    if (!id || isNaN(parseInt(id))) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).'.length,
          },
        ],
      });
    }

    try {
      const command = await this.commandService.findById(parseInt(id));
      
      // T·∫°o chu·ªói hi·ªÉn th·ªã tham s·ªë
      let parametersText = 'Kh√¥ng c√≥';
      if (command.parameters && Object.keys(command.parameters).length > 0) {
        parametersText = '';
        for (const [param, desc] of Object.entries(command.parameters)) {
          parametersText += `‚Ä¢ ${param}: ${desc}\n`;
        }
      }
      
      // T·∫°o chu·ªói hi·ªÉn th·ªã v√≠ d·ª•
      let examplesText = 'Kh√¥ng c√≥';
      if (command.examples && command.examples.length > 0) {
        examplesText = '';
        for (const example of command.examples) {
          examplesText += `‚Ä¢ ${example}\n`;
        }
      }
      
      // T·∫°o chu·ªói hi·ªÉn th·ªã th·ªùi gian
      const createdAt = new Date(command.createdAt);
      const timeAgo = this.getTimeAgo(createdAt);

      return messageChannel.reply({
        embed: [
          {
            color: getRandomColor(),
            title: `üìù Command #${command.id}: "${command.title}"`,
            fields: [
              {
                name: 'Danh m·ª•c',
                value: command.category,
              },
              {
                name: 'M√¥ t·∫£',
                value: command.description || '*(Kh√¥ng c√≥ m√¥ t·∫£)*',
              },
              {
                name: 'L·ªánh',
                value: '```\n' + command.command + '\n```',
              },
              {
                name: 'Tham s·ªë',
                value: parametersText,
              },
              {
                name: 'V√≠ d·ª•',
                value: examplesText,
              },
              {
                name: 'Tr·∫°ng th√°i',
                value: command.deleted ? 'üóëÔ∏è ƒê√£ x√≥a' : '‚úÖ Ho·∫°t ƒë·ªông',
              },
              {
                name: 'ƒê√£ t·∫°o',
                value: `${createdAt.toLocaleString()} (${timeAgo})`,
              },
            ],
            footer: {
              text: 'DevHelper Bot',
            },
          },
        ],
        components: [
          {
            type: MessageComponentType.ACTION_ROW,
            components: [
              {
                type: MessageComponentType.BUTTON,
                style: ButtonStyle.BLUE,
                label: 'C·∫≠p Nh·∫≠t L·ªánh',
                custom_id: `${ButtonAction.UPDATE}:command:${command.id}`,
              } as ButtonComponent,
              {
                type: MessageComponentType.BUTTON,
                style: ButtonStyle.RED,
                label: 'X√≥a L·ªánh',
                custom_id: `${ButtonAction.DELETE}:command:${command.id}`,
              } as ButtonComponent,
            ],
          } as ActionRowComponent,
        ],
      } as any);
    } catch (error) {
      return messageChannel.reply({
        t: `‚ùå L·ªói: ${error.message}`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ùå L·ªói: ${error.message}`.length,
          },
        ],
      });
    }
  }

  private async handleUpdate(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id, title, command, desc, category, parameters, examples } = args;
    
    if (!id || isNaN(parseInt(id))) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).'.length,
          },
        ],
      });
    }

    try {
      // Ki·ªÉm tra l·ªánh c√≥ t·ªìn t·∫°i kh√¥ng
      const existingCommand = await this.commandService.findById(parseInt(id));
      
      // T·∫°o object v·ªõi c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t
      const updateData: any = {};
      if (title) updateData.title = title;
      if (command) updateData.command = command;
      if (desc !== undefined) updateData.description = desc;
      if (category) updateData.category = category;
      
      // Parse parameters v√† examples n·∫øu c√≥
      if (parameters) {
        try {
          updateData.parameters = JSON.parse(parameters);
        } catch (error) {
          return messageChannel.reply({
            t: `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters: ${error.message}`,
            mk: [
              {
                type: EMarkdownType.PRE,
                s: 0,
                e: `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters: ${error.message}`.length,
              },
            ],
          });
        }
      }
      
      if (examples) {
        try {
          updateData.examples = JSON.parse(examples);
        } catch (error) {
          return messageChannel.reply({
            t: `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho examples: ${error.message}`,
            mk: [
              {
                type: EMarkdownType.PRE,
                s: 0,
                e: `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho examples: ${error.message}`.length,
              },
            ],
          });
        }
      }
      
      // Ki·ªÉm tra xem c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t kh√¥ng
      if (Object.keys(updateData).length === 0) {
        return messageChannel.reply({
          t: '‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.',
          mk: [
            {
              type: EMarkdownType.PRE,
              s: 0,
              e: '‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.'.length,
            },
          ],
        });
      }
      
      // C·∫≠p nh·∫≠t v√†o database
      await this.commandService.update(parseInt(id), updateData);
      
      // L·∫•y l·ªánh sau khi c·∫≠p nh·∫≠t
      const updatedCommand = await this.commandService.findById(parseInt(id));
      
      // So s√°nh v√† hi·ªÉn th·ªã c√°c tr∆∞·ªùng ƒë√£ thay ƒë·ªïi
      let changesText = '';
      for (const key of Object.keys(updateData)) {
        let oldValue = existingCommand[key];
        let newValue = updatedCommand[key];
        
        // Format cho d·ªÖ ƒë·ªçc
        if (typeof oldValue === 'object') oldValue = JSON.stringify(oldValue);
        if (typeof newValue === 'object') newValue = JSON.stringify(newValue);
        
        changesText += `‚Ä¢ ${key}: ${oldValue} ‚ûî ${newValue}\n`;
      }
      
      return messageChannel.reply({
        t: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªánh #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªánh #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`.length,
          },
        ],
        components: [
          {
            type: MessageComponentType.ACTION_ROW,
            components: [
              {
                type: MessageComponentType.BUTTON,
                style: ButtonStyle.BLUE,
                label: 'Xem Chi Ti·∫øt',
                custom_id: `${ButtonAction.VIEW}:command:${id}`,
              } as ButtonComponent,
            ],
          } as ActionRowComponent,
        ],
      } as any);
    } catch (error) {
      return messageChannel.reply({
        t: `‚ùå L·ªói: ${error.message}`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ùå L·ªói: ${error.message}`.length,
          },
        ],
      });
    }
  }

  private async handleDelete(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;
    
    if (!id || isNaN(parseInt(id))) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).'.length,
          },
        ],
      });
    }

    try {
      // L·∫•y th√¥ng tin l·ªánh tr∆∞·ªõc khi x√≥a
      const command = await this.commandService.findById(parseInt(id));
      
      // X√≥a m·ªÅm l·ªánh
      await this.commandService.softDelete(parseInt(id));
      
      return messageChannel.reply({
        t: `üóëÔ∏è ƒê√£ x√≥a l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command restore --id=${id} ƒë·ªÉ kh√¥i ph·ª•c.`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `üóëÔ∏è ƒê√£ x√≥a l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command restore --id=${id} ƒë·ªÉ kh√¥i ph·ª•c.`.length,
          },
        ],
        components: [
          {
            type: MessageComponentType.ACTION_ROW,
            components: [
              {
                type: MessageComponentType.BUTTON,
                style: ButtonStyle.GREEN,
                label: 'Kh√¥i Ph·ª•c',
                custom_id: `${ButtonAction.RESTORE}:command:${id}`,
              } as ButtonComponent,
            ],
          } as ActionRowComponent,
        ],
      } as any);
    } catch (error) {
      return messageChannel.reply({
        t: `‚ùå L·ªói: ${error.message}`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ùå L·ªói: ${error.message}`.length,
          },
        ],
      });
    }
  }

  private async handleRestore(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;
    
    if (!id || isNaN(parseInt(id))) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).'.length,
          },
        ],
      });
    }

    try {
      // Kh√¥i ph·ª•c l·ªánh
      await this.commandService.restore(parseInt(id));
      
      // L·∫•y th√¥ng tin l·ªánh sau khi kh√¥i ph·ª•c
      const command = await this.commandService.findById(parseInt(id));

      return messageChannel.reply({
        t: `‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`.length,
          },
        ],
        components: [
          {
            type: MessageComponentType.ACTION_ROW,
            components: [
              {
                type: MessageComponentType.BUTTON,
                style: ButtonStyle.BLUE,
                label: 'Xem Chi Ti·∫øt',
                custom_id: `${ButtonAction.VIEW}:command:${id}`,
              } as ButtonComponent,
            ],
          } as ActionRowComponent,
        ],
      } as any);
    } catch (error) {
      return messageChannel.reply({
        t: `‚ùå L·ªói: ${error.message}`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `‚ùå L·ªói: ${error.message}`.length,
          },
        ],
      });
    }
  }

  private async handleFind(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { query } = args;
    
    if (!query) {
      return messageChannel.reply({
        t: '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --query.',
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --query.'.length,
          },
        ],
      });
    }

    // T√¨m ki·∫øm l·ªánh
    const commands = await this.commandService.search(query);
    
    if (commands.length === 0) {
      return messageChannel.reply({
        t: `üîç Kh√¥ng t√¨m th·∫•y l·ªánh n√†o kh·ªõp v·ªõi "${query}".`,
        mk: [
          {
            type: EMarkdownType.PRE,
            s: 0,
            e: `üîç Kh√¥ng t√¨m th·∫•y l·ªánh n√†o kh·ªõp v·ªõi "${query}".`.length,
          },
        ],
      });
    }

    // T·∫°o danh s√°ch l·ªánh t√¨m th·∫•y
    let listText = `üîç T√¨m th·∫•y ${commands.length} l·ªánh:\n`;
    
    commands.forEach((cmd, index) => {
      listText += `${index + 1}. #${cmd.id}: ${cmd.title} - ${cmd.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
    });
    
    listText += '\nüìå ƒê·ªÉ xem chi ti·∫øt, s·ª≠ d·ª•ng:\n';
    commands.slice(0, 5).forEach(cmd => {
      listText += `‚Ä¢ /command detail --id=${cmd.id}\n`;
    });

    // T·∫°o c√°c button ƒë·ªÉ xem chi ti·∫øt
    const buttons: ButtonComponent[] = [];
    for (let i = 0; i < Math.min(5, commands.length); i++) {
      buttons.push({
        type: MessageComponentType.BUTTON,
        style: ButtonStyle.BLUE,
        label: `Xem Chi Ti·∫øt #${commands[i].id}`,
        custom_id: `${ButtonAction.VIEW}:command:${commands[i].id}`,
      } as ButtonComponent);
    }

    const actionRow: ActionRowComponent = {
      type: MessageComponentType.ACTION_ROW,
      components: buttons,
    } as ActionRowComponent;

    return messageChannel.reply({
      t: listText,
      mk: [
        {
          type: EMarkdownType.PRE,
          s: 0,
          e: listText.length,
        },
      ],
      components: [actionRow],
    } as any);
  }

  // Helper ƒë·ªÉ t√≠nh th·ªùi gian t∆∞∆°ng ƒë·ªëi
  private getTimeAgo(date: Date): string {
    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval >= 1) {
      return interval === 1 ? "1 nƒÉm tr∆∞·ªõc" : `${interval} nƒÉm tr∆∞·ªõc`;
    }
    
    interval = Math.floor(seconds / 2592000);
    if (interval >= 1) {
      return interval === 1 ? "1 th√°ng tr∆∞·ªõc" : `${interval} th√°ng tr∆∞·ªõc`;
    }
    
    interval = Math.floor(seconds / 86400);
    if (interval >= 1) {
      return interval === 1 ? "1 ng√†y tr∆∞·ªõc" : `${interval} ng√†y tr∆∞·ªõc`;
    }
    
    interval = Math.floor(seconds / 3600);
    if (interval >= 1) {
      return interval === 1 ? "1 gi·ªù tr∆∞·ªõc" : `${interval} gi·ªù tr∆∞·ªõc`;
    }
    
    interval = Math.floor(seconds / 60);
    if (interval >= 1) {
      return interval === 1 ? "1 ph√∫t tr∆∞·ªõc" : `${interval} ph√∫t tr∆∞·ªõc`;
    }
    
    return Math.floor(seconds) === 0 ? "v·ª´a xong" : `${Math.floor(seconds)} gi√¢y tr∆∞·ªõc`;
  }
}